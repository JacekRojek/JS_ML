{"version":3,"sources":["ui.ts","index.ts"],"names":[],"mappings":";AAQa,aAAA,QAAA,YAAA,EARb,IAAM,EAAU,SAAS,eAAe,WAClC,EAAQ,SAAS,eAAe,SAChC,EAAe,SAAS,eAAe,qBAEhC,QAAA,UAAY,SAAC,GAAa,OAAA,EAAQ,QAAU,WACvD,EAAS,EAAa,SAGX,QAAA,QAAU,SAAC,GAAa,OAAA,EAAM,QAAU,WACnD,EAAS,EAAa;;ACgFxB,aAzFA,QAAA,YAAA,EACA,IAAA,EAAA,QAAA,QAEM,EAAQ,IACR,EAAQ,IAER,EAAQ,SAAA,GAAM,OAAA,IAAI,QAAQ,SAAA,GAAW,OAAA,WAAW,EAAS,MACzD,EAAO,SAAC,EAAM,GAAQ,OAAA,KAAK,UAAY,EAAO,GAAO,GAYrD,EAAQ,SAAC,EAAiB,GAIvB,OAHK,EAAM,EAAI,EAAQ,EAClB,EAAM,EAAI,EAAQ,GACV,EAAI,GAAK,GAI/B,SAAS,EAAM,EAAiB,EAAa,GACrC,IACA,EAAQ,EADM,EAAM,EAAS,GAG5B,MAAA,CACL,EAAG,EAAQ,EAAI,EAAM,EAAI,EAFN,GAGnB,EAAG,EAAQ,EAAI,EAAM,EAAI,EAHN,IAOvB,IAAM,EAAgB,WAAe,MAAA,CACnC,EAAG,GAAM,EAAG,GACZ,EAAG,GAAM,EAAG,KAGR,EAAO,SAAC,GAAsB,OAAA,EAAM,EAAI,EAAI,EAAM,EAAI,GAAK,GAO3D,EAAiB,SAAC,GAAuB,OAAA,MAAM,KAAK,MAAM,IAAM,IAAI,WAAO,MAAA,CAC/E,EAAG,EAAK,EAAG,GACX,EAAG,EAAK,EAAG,OAGP,EAAe,EAAe,KAE9B,EAAO,SAAC,GACZ,OAAO,SAAS,eAAe,UAAU,UAAY,mBACvC,EAAK,aAAa,EAAK,WACjC,EAAa,IAAI,SAAA,GAAS,MAAA,mCAEhB,EAAM,EAAC,oBACP,EAAM,EAAC,yCAEsB,IAA3B,EAAM,EAAS,GAAgB,OAAS,OAAK,QAAO,0BAC/C,EAAK,gBAAgB,EAAM,EAAC,sCAK/C,EAAiB,IACf,EAAgB,SAAC,EAAyB,GACxC,IAAA,EAAW,EAAe,GAAiB,IAAI,SAAA,GAAU,MAAA,CAC7D,MAAK,EACL,KAAM,EAAK,MAEb,EAAiB,EACjB,EAAS,QAAQ,SAAC,GAET,OADP,EAAiB,EAAM,EAAgB,EAAQ,MAAO,EAAQ,QAGhE,QAAQ,IAAI,mBAAoB,GAChC,EAAK,IAGP,EAAc,IAAK,KAInB,EAAA,UAAU,SAAC,GAAY,OAAA,EAAc,EAAS,OAC9C,EAAA,QAAQ,SAAC,GAAY,OAAA,EAAc,EAAS","file":"LinearPredictins.af2b888a.map","sourceRoot":"..","sourcesContent":["const refresh = document.getElementById('refresh');\nconst train = document.getElementById('train');\nconst trainSetSize = document.getElementById('training-set-size') as HTMLInputElement;\n\nexport const onRefresh = (callback) => refresh.onclick = () => {\n  callback(trainSetSize.value);\n}\n\nexport const onTrain = (callback) => train.onclick = () => {\n  callback(trainSetSize.value);\n}\n","// const R = require('ramda');\nimport { onRefresh, onTrain } from './ui';\n\nconst Y_MAX = 400;\nconst X_MAX = 400;\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst rand = (high, low) => Math.random() * (high - low) + low;\n\ntype Team = 1 | -1;\ntype Weights = {\n  x: number;\n  y: number;\n};\ntype Point = {\n  x: number;\n  y: number;\n};\n\nconst guess = (weights:Weights, point:Point):Team => {\n  const sum = point.x * weights.x\n            + point.y * weights.y;\n  const team = sum >= 0 ? 1 : -1;\n  return team;\n};\n\nfunction train(weights:Weights, point:Point, team:Team):Weights {\n  const guessResult = guess(weights, point);\n  const error = team - guessResult;\n  const learningRate = 0.5;\n  return {\n    x: weights.x + point.x * error * learningRate,\n    y: weights.y + point.y * error * learningRate,\n  };\n}\n\nconst randomWeights = ():Weights => ({\n  x: rand(-1, 1),\n  y: rand(-1, 1),\n});\n\nconst team = (point:Point):Team => (point.x > 2 * point.y ? 1 : -1);\n\n// const testTrain = () => {\n//   const point = { x: 200, y: 400 }; // -1\n//   return train(randomWeights, point, team(point));\n// };\n\nconst generatePoints = (num:number):Point[] => Array.from(Array(num)).map(() => ({\n  x: rand(0, X_MAX),\n  y: rand(0, Y_MAX),\n}));\n\nconst randomPoints = generatePoints(200);\n\nconst draw = (weights:Weights) => {\n  window.document.getElementById('canvas').innerHTML = `\n  <svg width=\"${X_MAX}\" height=\"${Y_MAX}\">\n    ${randomPoints.map(point => `\n      <circle \n          cx=\"${point.x}\"\n          cy=\"${point.y}\"\n          r=\"3\"\n          fill=\"${guess(weights, point) === -1 ? 'blue' : 'red' }\"/>`)}\n    <line x1=\"0\" x2=\"${X_MAX}\" y1=\"0\" y2=\"${Y_MAX/2}\" stroke=\"purple\" />\n  </svg>\n  `;\n};\n\nlet currentWeights = randomWeights();\nconst updateWeights = (trainingSetSize: number, initialWeights: Weights) => {\n  const examples = generatePoints(trainingSetSize).map(point => ({\n    point,\n    team: team(point),\n  }));\n  currentWeights = initialWeights;\n  examples.forEach((example) => {\n    currentWeights = train(currentWeights, example.point, example.team);\n    return currentWeights;\n  });\n  console.log('currentWeights::', currentWeights)\n  draw(currentWeights);\n};\n\nupdateWeights(100, randomWeights());\n\n// UI binding\n\nonRefresh((setSize) => updateWeights(setSize, randomWeights()))\nonTrain((setSize) => updateWeights(setSize, currentWeights))"]}